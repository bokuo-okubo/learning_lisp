;;  12.2 ソケットを使う
;; ## ソケットアドレス
;; ネットワーク上のソケットにはソケットアドレスが割り当てられている
;; ソケットアドレスは次の２つの要素からなる。

;; - IPアドレス
;; ネットワーク上でコンピュータを一位に指定する番号

;; - ポート番号
;; ネットワークを使うプログラムは、同じコンピュータで走る他のプログラムが既に使っていないポート番号を選んで使わなければならない。


;; ソケットアドレスはIPアドレスとポート番号の組み合わせ。
;; IPアドレスがネットワーク上の各コンピュータで一意であり、
;; ポート番号はコンピュータ内で一意なので、
;; ソケットアドレスは特定のコンピュータ上で走る特定のプログラムにつき一意ということになる。

;; ネットワーク上を走るTCPパケットは、行き先を示すソケットアドレスが付加されている。


;; 宛先のIPアドレスを持つコンピュータがパケットを受け取ると、OSがソケットのアドレスのポート番号を見て、そのプログラムがメッセージを受け取るのかを判断する。
;; OSはどうやってあるポート番号に結び付けられたプログラムを知るんだろう。
;; プログラムはポートを使うために、そのポートに結び付けられたソケットを作るからだ
;; つまり、ソケットはプログラムがオペレーティングシステムに対して「ポート２５１にメッセージが届いたら私に届けて頂戴」という手段。

;; ### コネクション


;; 12.4 文字列ストリーム
(defparameter foo (make-string-output-stream))
(princ "this will go into foo." foo)
(princ "this will also go into foo." foo)
(get-output-stream-string foo)
;; "this will go into foo.this will also go into foo."

;;関数にストリームを渡す
;; ストリームを引数に期待している関数に、文字列ストリームを渡すことができる。
;; これは、ファイルやソケットを読み書きする関数をデバッグする際にとても役に立つ。
;; 本物のファイルやソケットの代わりに文字列を入出力データとして与えたり受け取ったりできるから。


;; ### ファイルハンドリングが入るような関数を書く場合、ハードコーディングより、ストリームを使ったほうがいい


;; コードの読みやすさとデバッグ

(with-output-to-string (*standard-output*)
  (princ "the sum of ")
  (princ 5)
  (princ " and ")
  (princ 2)
  (princ " is ")
  (princ (+ 2 5)))
